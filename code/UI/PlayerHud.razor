@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>

    <div class="playerlist">

        @for(int i=0; i<playerPawn.playerControllers.Count; i++)
        {
            
            <div class="playername" style= "background-color: @playerPawn.playerColours[i].Hex">


                 <p> @playerPawn.playerControllers[i].Network.OwnerConnection.DisplayName </p>



            </div>


        }




    </div>


    <div class="jumpbuttonholder">


            @for (int i = 0; i < playerPawn.playerControllers.Count; i++)
            {

            @if (playerPawn.playerControllers[i].jumpTimer > 0.01f)
            {
                <div class="buttonoutline" style="border: @playerPawn.playerColours[i].Hex; height: @(112+(12 * i))px;width: @(112+(12 * i))px; left: 50%;transform: translate(-50%,0); bottom: @(32 + (playerPawn.playerControllers.Count*6) + 6*(playerPawn.playerControllers.Count-i));border-radius:@(16+i*6);">
                </div>

            }


            }

        <div class="movementbutton" style="bottom: @( 44+ (playerPawn.playerControllers.Count*6) + 6*(playerPawn.playerControllers.Count-1));">

            <p> 🔼 </p>
            </div>




     </div>

 



    <div class="movementbuttonpanel">

        <div class="movementbuttonrow">

            @for (int i = 0; i < playerPawn.playerControllers.Count; i++)
            {
                @if (playerPawn.playerControllers[i].forwardInput == 1)
                {
                <div class="buttonoutline" style="border: @playerPawn.playerColours[i].Hex; height: @(92+(12 * i))px;width: @(92+(12 * i))px; left: 50%;transform: translate(-50%,0); bottom: @(32 + (playerPawn.playerControllers.Count*6) + 6*(playerPawn.playerControllers.Count-i));border-radius:@(16+i*6);">
                </div>


                }



              

            }
            <div class="toprowbutton" style="bottom: @( 44+ (playerPawn.playerControllers.Count*6) + 6*(playerPawn.playerControllers.Count-1));">

                @if (playerPawn.normalisedVelocity.x > 0)
                {
                    <p> ☝️ </p>
                }
                else
                {

                    <p> ⛔ </p>
                }

               

            </div>



        </div>
        <div class="movementbuttonrow">


            @for (int i = 0; i < playerPawn.playerControllers.Count; i++)
            {
                @if (playerPawn.playerControllers[i].strafeInput == 1)
                {
                    <div class="buttonoutline" style="border: @playerPawn.playerColours[i].Hex; height: @(92+(12 * i))px;width: @(92+(12 * i))px; left: 15%;transform: translate(-50%,0); bottom: @(32 + 6*(playerPawn.playerControllers.Count-i));border-radius:@(16+i*6);">
                    </div>
                }

            }


            <div class="toprowbutton" style="bottom: @( 44 + 6*(playerPawn.playerControllers.Count-1)); left: 15%;">

                @if (playerPawn.normalisedVelocity.y > 0)
                {
                    <p> 👈 </p>
                }
                else
                {

                    <p> ⛔ </p>
                }

            </div>


            @for (int i = 0; i < playerPawn.playerControllers.Count; i++)
            {
                @if (playerPawn.playerControllers[i].forwardInput == -1)
                {

                <div class="buttonoutline" style="border: @playerPawn.playerColours[i].Hex; height: @(92+(12 * i))px;width: @(92+(12 * i))px; left: 50%;transform: translate(-50%,0); bottom: @(32 + 6*(playerPawn.playerControllers.Count-i));border-radius:@(16+i*6);">
                </div>
                }

            }

            <div class="toprowbutton" style="bottom: @( 44 + 6*(playerPawn.playerControllers.Count-1)); left: 50%;">

                @if (playerPawn.normalisedVelocity.x < 0)
                {
                    <p> 👇 </p>
                }
                else
                {

                    <p> ⛔ </p>
                }

            </div>


            @for (int i = 0; i < playerPawn.playerControllers.Count; i++)
            {
                @if (playerPawn.playerControllers[i].strafeInput == -1)
                {

                    <div class="buttonoutline" style="border: @playerPawn.playerColours[i].Hex; height: @(92+(12 * i))px;width: @(92+(12 * i))px; left: 85%;transform: translate(-50%,0); bottom: @(32 + 6*(playerPawn.playerControllers.Count-i));border-radius:@(16+i*6);">                    </div>
                }

            }

            <div class="toprowbutton" style="bottom: @( 44 + 6*(playerPawn.playerControllers.Count-1)); left: 85%;">
                @if (playerPawn.normalisedVelocity.y < 0)
                {
                    <p> 👉 </p>
                }
                else
                {

                    <p> ⛔ </p>
                }

            </div>





        </div>
    </div>




  
        




    
	
</root>

@code
{

    [Property] PlayerPawn playerPawn { get; set; }

    protected override int BuildHash()

    {
        //return System.HashCode.Combine(playerPawn.playerControllers);
        return System.HashCode.Combine(Time.Delta);// DON'T DO THIS IN THE FUTUREEEE

    }
        
}
